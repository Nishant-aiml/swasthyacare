import axios, { AxiosError } from 'axios';

// Using BioGPT for medical analysis
const API_URL = 'https://api-inference.huggingface.co/models/microsoft/BioGPT-Large';
const API_KEY = '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';
const MAX_RETRIES = 3;
const RETRY_DELAY = 10000; // 10 seconds

// Log API configuration status (remove in production)
console.log('AI Service Configuration Status:', {
  hasApiKey: !!API_KEY,
  apiUrl: API_URL
});

const FALLBACK_RESPONSES = {
  SYMPTOMS: `Based on the symptoms provided, here are some general considerations:

1. Possible Causes:
   - Various factors could be contributing to these symptoms
   - The exact cause should be determined by a healthcare provider

2. General Recommendations:
   - Rest and monitor your symptoms
   - Keep track of any changes or new symptoms
   - Stay hydrated and maintain good nutrition

3. When to Seek Medical Care:
   - If symptoms worsen
   - If you develop difficulty breathing
   - If you have severe pain or discomfort

IMPORTANT: This is not a diagnosis. Please consult a healthcare provider for proper evaluation and treatment.`,
  RISKS: "For accurate health risk assessment, please consult with a healthcare provider who can evaluate your complete medical history and current health status.",
  EMERGENCY: "If you're experiencing a medical emergency, call emergency services (911) immediately or go to the nearest emergency room. Do not wait for an AI response.",
  PLAN: "For a personalized health plan, please consult with a healthcare provider who can take into account your specific needs, medical history, and current health status.",
  CHAT: "For specific medical advice, please consult with a qualified healthcare provider who can properly evaluate your situation."
} as const;

type FallbackResponseType = keyof typeof FALLBACK_RESPONSES;

const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

async function callAIService(prompt: string, type: FallbackResponseType, retryCount = 0): Promise<string> {
  if (!API_KEY) {
    throw new Error('API key not found');
  }

  try {
    const response = await axios({
      method: 'post',
      url: API_URL,
      headers: {
        'Authorization': `Bearer ${API_KEY}`,
        'Content-Type': 'application/json',
      },
      data: {
        inputs: prompt,
        parameters: {
          max_new_tokens: 500,
          temperature: 0.7,
          top_p: 0.9,
          do_sample: true,
          return_full_text: false
        }
      },
      timeout: 30000
    });

    let result = '';
    if (Array.isArray(response.data) && response.data.length > 0) {
      result = response.data[0]?.generated_text || '';
    } else if (typeof response.data === 'string') {
      result = response.data;
    }

    if (result.trim()) {
      // Process the response to make it more readable
      const processedResult = result
        .replace(/\\n/g, '\n')
        .replace(/\s+/g, ' ')
        .trim();

      return `${processedResult}\n\nIMPORTANT DISCLAIMER: This information is generated by AI for general guidance only and should not replace professional medical advice. Always consult a qualified healthcare provider for proper diagnosis and treatment.`;
    }
    
    return FALLBACK_RESPONSES[type];
  } catch (error) {
    if (error instanceof AxiosError) {
      console.error('AI Service Error:', error.response?.data || error.message);

      if (error.response?.status === 503 && retryCount < MAX_RETRIES) {
        const waitTime = RETRY_DELAY * (retryCount + 1);
        console.log(`Service unavailable. Retrying in ${waitTime/1000} seconds... (Attempt ${retryCount + 1}/${MAX_RETRIES})`);
        
        await sleep(waitTime);
        return callAIService(prompt, type, retryCount + 1);
      }
    } else {
      console.error('Unexpected error:', error);
    }

    return FALLBACK_RESPONSES[type];
  }
}

// Symptom Checker
export async function getSymptomAnalysis(symptoms: string[]): Promise<string> {
  const prompt = `Medical Analysis Request:
Symptoms: ${symptoms.join(', ')}

Please provide:
1. Potential causes
2. General recommendations
3. When to seek immediate medical attention`;

  return callAIService(prompt, 'SYMPTOMS');
}

// Health Risk Assessment
export async function assessHealthRisks(
  age: number,
  lifestyle: string[],
  conditions: string[]
): Promise<string> {
  const prompt = `Health Risk Assessment Request:
Age: ${age}
Lifestyle Factors: ${lifestyle.join(', ')}
Medical Conditions: ${conditions.join(', ')}

Please assess potential health risks and provide recommendations.`;

  return callAIService(prompt, 'RISKS');
}

// Health Plan Generator
export async function generateHealthPlan(
  goals: string[],
  restrictions: string[],
  preferences: string[]
): Promise<string> {
  const prompt = `Health Plan Request:
Goals: ${goals.join(', ')}
Restrictions: ${restrictions.join(', ')}
Preferences: ${preferences.join(', ')}

Please generate a personalized health plan.`;

  return callAIService(prompt, 'PLAN');
}

// Emergency Assistant
export async function getEmergencyAdvice(
  situation: string,
  symptoms: string[]
): Promise<string> {
  const prompt = `Emergency Situation:
Description: ${situation}
Symptoms: ${symptoms.join(', ')}

Please provide immediate guidance and next steps.`;

  return callAIService(prompt, 'EMERGENCY');
}

// Health Chat
export async function getHealthChatResponse(
  conversation: string[],
  currentQuery: string
): Promise<string> {
  const prompt = `Previous conversation:
${conversation.join('\n')}

Current query: ${currentQuery}

Please provide a helpful response.`;

  return callAIService(prompt, 'CHAT');
}